/*
// Task_1. Почему код дает именно такие результаты?
var a = 1, b = 1, c, d;
c = ++a; alert(c); // 2
// в префиксной форме инкрементирование (увеличение "а" на единицу) происходи сразу,
// возврат — уже с обновленным значением;

d = b++; alert(d); // 1
// в постфиксной форме сначала происходит возвращение значения, а потом выполняется
// инкрементирование (увеличение "b" на единицу произойдет при дальнейшем применении в коде).

c = (2 + ++a); alert(c); // 5
// (2 + 1 + 2) увеличение "а" на единицу происходи сразу.

d = (2 + b++); alert(d); // 4
// (2 + 2) увеличение "b" на единицу произошло после первого применения в строке 7,
// (увеличение значения "b" не происходит, т.к. инкремент применен в постфиксной форме).

alert(a); // 3
// переменная "а" увеличилась путем двухкратного применения префиксных инкрементов)
// с первоначального значения "1" до значения "2" и,затем, до значения "3".

alert(b); // 3
// переменная "b" т.ж. увеличилась путем двухкратного применения, но с применением постфиксных инкрементов,
// что привело к увеличению ее значения до "3".
// Разницы между применением постфиксного или префиксного инкремента отсутствует, 
// т.к. alert(а) и alert(b) стоят в конце всех преобразований.


// Task_2. Чему будет равен x?
var a = 2;
var x = 1 + (a *= 2); // 5 
// var x = 1 + (а = а * 2)    

// Task_3. Объявить две целочисленные переменные — a и b и задать им произвольные начальные
// значения. Затем написать скрипт, который работает по следующему принципу:
// если a и b положительные, вывести их разность;
// если а и b отрицательные, вывести их произведение;
// если а и b разных знаков, вывести их сумму;
// Ноль можно считать положительным числом.

var a = 1, b = 2;
if (a >= 0 && b >= 0) {
    alert(a - b);
}
if (a < 0 && b < 0) {
    alert(a * b);
}
else alert(a + b);

// Task_4. Присвоить переменной а значение в промежутке [0..15].
// С помощью оператора switch организовать вывод чисел от a до 15.

a = 3;
switch (a) {
    case 1:
        alert(a++);
    case 2:
        alert(a++);
    case 3:
        alert(a++);
    case 4:
        alert(a++);
    case 5:
        alert(a++);
    case 6:
        alert(a++);
    case 7:
        alert(a++);
    case 8:
        alert(a++);
    case 9:
        alert(a++);
    case 10:
        alert(a++);
    case 11:
        alert(a++);
    case 12:
        alert(a++);
    case 13:
        alert(a++);
    case 14:
        alert(a++);
    case 15:
        alert(a++);
}

// Task_5. Реализовать четыре основные арифметические операции в виде функций с двумя
// параметрами. Обязательно использовать оператор return.

var a = 3, b = 2;
function sum(a, b) {
    return a + b;
}
function div(a, b) {
    return a / b;
}
function sub(a, b) {
    return a - b;
}
function mult(a, b) {
    return a * b;
}
*/

// Task_6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
// где arg1, arg2 — значения аргументов, operation — строка с названием операции. В
// зависимости от переданного значения выполнить одну из арифметических операций
// (использовать функции из пункта 5) и вернуть полученное значение (применить switch).


function mathOperation(arg1, arg2, operation) {
    var arg1 = 10;
    var arg2 = 5;
    var operation = '*';
    var resultMath;
    switch (operation) {
        case '+':
            function addition(arg1, arg2) {
                return arg1 + arg2;
            }
            resultMath = addition(arg1, arg2);
            break;
        case '-':
            function subtraction(arg1, arg2) {
                return arg1 - arg2;
            }
            resultMath = subtraction(arg1, arg2);
            break;
        case '/':
            function division(arg1, arg2) {
                return arg1 / arg2;
            }
            resultMath = division(arg1, arg2);
            break;
        case '*':
            function multiplication(arg1, arg2) {
                return arg1 * arg2;
            }
            resultMath = multiplication(arg1, arg2);
            break;
    }
    console.log(resultMath);
}
